package com.example.backend_agent.group

import com.example.backend_agent.bd.model.Group
import com.example.backend_agent.bd.model.GroupAccess
import com.example.backend_agent.bd.repository.AuthRepository
import com.example.backend_agent.bd.repository.GroupAccessRepository
import com.example.backend_agent.bd.repository.GroupRepository
import com.example.utils.component.ApiResponse
import org.springframework.http.ResponseEntity
import org.springframework.security.core.annotation.AuthenticationPrincipal
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

// DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
data class CreateGroupRequest(
    val groupName: String
)

// DTO –¥–ª—è –æ—Ç–≤–µ—Ç–∞
data class GroupSummary(
    val id: Long?,
    val name: String,
    val ownerName: String
)

// DTO –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫ –º–æ–µ–π –≥—Ä—É–ø–ø–µ
data class GrantAccessRequest(
    val groupId: Long,
    val phoneNumbers: List<String>
)

@RestController
@RequestMapping("/api/groups")
class GroupController(
    private val groupRepository: GroupRepository,
    private val groupAccessRepository: GroupAccessRepository,
    private val userRepository: AuthRepository
) {
    @PostMapping
    fun createGroup(
        @RequestBody request: CreateGroupRequest,
        @AuthenticationPrincipal userDetails: org.springframework.security.core.userdetails.User
    ): ResponseEntity<ApiResponse<GroupSummary>> {

        val phoneNumber = userDetails.username
        val currentUser = userRepository.findByPhoneNumber(phoneNumber)
            ?: return ResponseEntity.status(401).body(ApiResponse("ERROR", null, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è –≥—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
        val existingGroup = groupRepository.findByOwnerAndName(currentUser, request.groupName)
        if (existingGroup != null) {
            return ResponseEntity.status(400).body(
                ApiResponse("ERROR", null, "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            )
        }

        val group = groupRepository.save(Group(name = request.groupName, owner = currentUser))
        val summary = GroupSummary(group.id, group.name, group.owner.fullName)

        return ResponseEntity.ok(ApiResponse("SUCCESS", summary, null))
    }

    // 1. –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã (–≤–ª–∞–¥–µ–ª—å—Ü–∞)
    @GetMapping("/owner/groups")
    fun getMyGroups(
        @AuthenticationPrincipal userDetails: org.springframework.security.core.userdetails.User
    ): ResponseEntity<ApiResponse<List<GroupSummary>>> {
        val currentUser = userRepository.findByPhoneNumber(userDetails.username)
            ?: return ResponseEntity.status(401).body(ApiResponse("ERROR", null, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))

        val groups = groupRepository.findByOwner(currentUser)
            .map { GroupSummary(it.id, it.name, it.owner.fullName) }

        return ResponseEntity.ok(ApiResponse("SUCCESS", groups, null))
    }

    // 2. –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø (–Ω–µ –º–æ–∏)
    @GetMapping("/access")
    fun getGroupsWithAccess(
        @AuthenticationPrincipal userDetails: org.springframework.security.core.userdetails.User
    ): ResponseEntity<ApiResponse<List<GroupSummary>>> {
        val currentUser = userRepository.findByPhoneNumber(userDetails.username)
            ?: return ResponseEntity.status(401).body(ApiResponse("ERROR", null, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))

        val groupAccesses = groupAccessRepository.findByUser(currentUser)
        val groups = groupAccesses.map {
            GroupSummary(
                it.group.id,
                it.group.name,
                it.group.owner.fullName  // –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã
            )
        }

        return ResponseEntity.ok(ApiResponse("SUCCESS", groups, null))
    }

    // 3. –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫ –º–æ–µ–π –≥—Ä—É–ø–ø–µ
    @PostMapping("/grant/access")
    fun grantAccess(
        @RequestBody request: GrantAccessRequest,
        @AuthenticationPrincipal userDetails: org.springframework.security.core.userdetails.User
    ): ResponseEntity<ApiResponse<String>> {
        val currentUser = userRepository.findByPhoneNumber(userDetails.username)
            ?: return ResponseEntity.status(401).body(ApiResponse("ERROR", null, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))

        val group = groupRepository.findById(request.groupId)
            .orElse(null) ?: return ResponseEntity.status(404).body(ApiResponse("ERROR", null, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))

        if (group.owner.id != currentUser.id) {
            return ResponseEntity.status(403).body(ApiResponse("ERROR", null, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"))
        }

        request.phoneNumbers.forEach { phone ->
            // üîí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–æ–≥ —Å–∞–º —Å–µ–±–µ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
            if (phone == currentUser.phoneNumber) {
                return@forEach
            }

            val user = userRepository.findByPhoneNumber(phone)
            if (user != null) {
                val existingAccess = groupAccessRepository.findByGroupAndUser(group, user)
                if (existingAccess == null) {
                    val access = GroupAccess(group = group, user = user)
                    groupAccessRepository.save(access)
                }
            }
        }

        return ResponseEntity.ok(ApiResponse("SUCCESS", "–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω", null))
    }
}